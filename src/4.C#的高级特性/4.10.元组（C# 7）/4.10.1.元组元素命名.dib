#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

/*
    4.10.1 元组元素命名
    当创建元组字面量时，可以为元组的元素起一些有意义的名字：
*/
var tuple = (Name: "Bob", Age: 23);
Console.WriteLine(tuple.Name);      // Bob
Console.WriteLine(tuple.Age);       // 23

#!csharp

// 当然也可以在指定元组类型时进行命名：
(string Name, int Age) GetPerson() => ("Bob", 23);

var person = GetPerson();
Console.WriteLine(person.Name);     // Bob
Console.WriteLine(person.Age);      // 23

/*
    需要指出，即使进行了命名也可以像匿名时那样使用Item1、Item2来引用元素（虽然Visual Studio会在IntelliSense中隐藏这些字段）。
*/

#!csharp

// 如果元组（按顺序）对应的元素类型相同，则元组是类型兼容的。而其元素命名可以不同：
(string Name, int Age, char Sex) bob1 = ("Bob", 23, 'M');
(string Age, int Sex, char Name) bob2 = bob1;   // No error!

// 上述例子也会导致令人困惑的结果：
Console.WriteLine(bob2.Name);     // M
Console.WriteLine(bob2.Age);      // Bob
Console.WriteLine(bob2.Sex);      // 23

#!csharp

/*
    类型擦除
    我们之前提到过C#编译器会为匿名类型创建自定义类并为每一个元素创建命名的属性。
    而在处理元组时则借助了一系列现存的泛型结构体，这和匿名对象的处理方式是非常不同的：
*/

public struct ValueTuple<T1> { }
public struct ValueTuple<T1, T2> { }
public struct ValueTuple<T1, T2, T3> { }

#!csharp

/*
    每一个ValueTuple<>结构体都有Item1、Item2等字段。
    因此，(string, int)是ValueTuple<string, int>的别名。
    同时，这意味着命名的元组元素并没有底层类型的命名属性的支撑。
    这些名字仅仅存在于源代码和编译器的“想象”中。在运行时，
    这些名字大多会消失。当我们反编译引用命名元素的元组时，可以看到程序仅仅引用了Item1、Item2这样的字段。
    若将元组变量赋值给一个object对象并在调试器下观察（或者在LINQPad下输出），就可以发现元素的名字完全消失了。
    因此，在绝大多数情况下，都不能用反射（reflection）（见第19章）的方式确定元组在运行时的命名。
*/

#!csharp

/*
    🍦 刚才提到元组的命名在大部分情况下都消失了，那么就有例外的情况。
    当方法/属性返回命名元组类型时，编译器会将一个自定义特性Tuple-ElementNamesAttribute附加到成员的返回类型上以生成元素名称（请参见4.11节）。
    这样命名元素就可以支持跨程序集的方法调用了（注意，在这种情况下，编译器没有可供参考的源代码）。
*/
