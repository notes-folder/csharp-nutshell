#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

/*
    4.8 扩展方法
    扩展方法允许在现有类型上扩展新的方法而无须修改原始类型的定义。
    扩展方法是静态类的静态方法，而其中的第一个参数需要用this修饰符修饰，且第一个参数的类型就是需要扩展的类型。
*/

public static class StringHelper
{
    public static bool IsCapitalized(this string s)
    {
        if (string.IsNullOrEmpty(s)) return false;
        return char.IsUpper(s[0]);
    }
}

//IsCapitalized扩展方法可以像string的实例方法那样进行调用。
Console.WriteLine ("Perth".IsCapitalized());

//编译后，扩展方法调用就会翻译成普通的静态方法调用了：
Console.WriteLine (StringHelper.IsCapitalized ("Perth"));

#!csharp

/*
    这个转换过程如下：
    arg0.Method (arg1, arg2, ...);                 // Extension method call
    StaticClass.Method (arg0, arg1, arg2, ...); // Static method call
*/

#!csharp

//接口也一样可以扩展：
public static T First<T>(this IEnumerable<T> sequence)
{
    foreach (T element in sequence)
        return element;

    throw new InvalidOperationException("No elements! ");
}
Console.WriteLine("Seattle".First());    // S
