#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

/*
    4.6.4 迭代器语义
    迭代器是包含一个或者多个yield语句的方法、属性或者索引器。
    迭代器必须返回以下四个接口之一（否则编译器会产生相应错误）：
        // Enumerable interfaces
        System.Collections.IEnumerable
        System.Collections.Generic.IEnumerable<T>

        // Enumerator interfaces
        System.Collections.IEnumerator
        System.Collections.Generic.IEnumerator<T>
*/

#!csharp

/*
    迭代器具有不同的语义，取决于迭代器返回的是可枚举接口还是枚举器接口，我们将在第7章说明。
*/

//允许使用多个yield statements，例如：
IEnumerable<string> Foo()
{
    yield return "One";
    yield return "Two";
    yield return "Three";
}

foreach (string s in Foo())
{
    Console.WriteLine(s);           // Prints "One", "Two", "Three"
}

#!csharp

/*
    4.6.4.1 yield break语句
    yield break语句表明迭代器块不再返回更多的元素而是提前退出。
*/

//我们可以将Foo修改为下面的示例：
IEnumerable<string> Foo(bool breakEarly)
{
    yield return "One";
    yield return "Two";

    if (breakEarly)
        yield break;

    yield return "Three";
}

foreach (string s in Foo(true))
{
    Console.WriteLine(s);           // Prints "One", "Two"
}

//🍦迭代器语句块中使用return语句是非法的，应当使用yield break。

#!csharp

/*
    4.6.4.2 迭代器和try/catch/finally语句块
*/

//yield return语句不能出现在带catch子句的try语句块中：
IEnumerable<string> Foo()
{
    try
    {
        yield return "One";
    }     // Illegal
    catch
    {
        //... 
    }
}

#!csharp

/*
    yield return语句也不能出现在catch或者finally语句块中。
    出现这些限制的原因是编译器必须将迭代器转换为带有MoveNext、Current和Dispose成员的普通类，而转换异常处理语句块会大大增加代码的复杂性。
*/

//但是可以在只带有finally块的try语句块中使用yield语句：
IEnumerable<string> Foo()
{
    try
    {
        yield return "One"; // OK
    }
    finally
    {
        //...
    }
}

#!csharp

/*
    当枚举器到达序列末尾或被销毁时就可以执行finally块了。
    如果枚举提前结束，则foreach语句会隐式销毁枚举器，这是消费枚举器的安全且正确的做法。
    当显式使用枚举器时，一个陷阱是提前结束枚举而不销毁枚举器，从而绕过finally块的执行。
    我们可以将枚举器的使用显式包裹在using语句中来避免上述错误。
*/
string firstElement = null;
var sequence = Foo();
using (var enumerator = sequence.GetEnumerator())
    if (enumerator.MoveNext())
    {
        firstElement = enumerator.Current;
        Console.WriteLine(firstElement);
    }
