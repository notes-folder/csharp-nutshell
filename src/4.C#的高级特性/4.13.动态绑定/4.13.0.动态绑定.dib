#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

/*
    4.13 动态绑定动态绑定
    （dynamic binding）将绑定（binding）（即解析类型、成员和操作的过程）从编译时延迟到运行时。
    动态绑定适用于那些开发者知道某个特定的函数、成员或操作的存在，而编译器不知道的情况。
    这种情况通常出现在操作动态语言（例如IronPython）和COM时。
    在这些情况下，如果不使用动态绑定就只能使用反射机制了。
*/

// 动态类型是通过上下文关键字dynamic声明的：
dynamic GetSomeObject()
{
    return new { Quack = (Action)(() => Console.WriteLine("Quack!")) };
}

dynamic d = GetSomeObject();
d.Quack();

#!csharp

/*
    动态绑定类型会告诉编译器“不要紧张”，我们认为d的运行时类型具有一个Quack方法，但是我们无法静态的证明这一点。
    由于d是动态的，所以编译器推迟到运行时才将Quack绑定给d。
    为了真正理解这个概念，我们需要先区分静态绑定和动态绑定。
*/
