#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

/*
    4.3.3 Lambda表达式和局部方法的对比
    C# 7中的局部方法（请参见1.8.1.4节）和Lambda表达式的相应功能是重叠的，
    而局部方法拥有以下三个优势：
        · 局部方法无须使用奇怪的技巧就可以实现递归（调用自己）。
        · 局部方法避免了定义杂乱的委托类型。
        · 局部方法的开销更小。
    局部方法更加高效，因为它不需要间接使用委托（委托会消耗更多的CPU时钟周期并使用更多的内存），而且当它们访问局部变量的时候不需要编译器像委托那样将捕获的变量放到一个隐藏的类中去。
*/

//但是，在许多情况下仍然需要使用委托。尤其是当需要调用高阶函数的时候，例如一个使用委托作为参数的方法：
public void Foo (Func<int, bool>  predicate) {  }
