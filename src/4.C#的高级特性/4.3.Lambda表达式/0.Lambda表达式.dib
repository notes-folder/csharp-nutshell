#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

/*
    4.3 Lambda表达式
    Lambda表达式是一种可以替代委托实例的匿名方法。
    编译器会立即将Lambda表达式转换为以下两种形式之一：
        · 一个委托实例。
        · 一个类型为Expression<TDelegate> 的表达式树。
            该表达式树将Lambda表达式内部的代码表现为一个可遍历的对象模型，因此Lambda表达式的解释可以延迟到运行时（请参见8.10节）。
*/

//下面的委托类型：
delegate int Transformer (int i);

//可使用Lambda表达式x => x * x赋值，也可以调用该表达式：
Transformer sqr = x => x * x;
Console.WriteLine (sqr(3));     // 9

#!csharp

/*
    🍦编译器在内部将这种Lambda表达式编译为一个私有的方法，并将表达式代码转移到该方法中。
    Lambda表达式拥有以下的形式：
    (parameters) => expression-or-statement-block
*/

//为了方便，在只有一个可推测类型的参数时，参数可以省略小括号。
//本例中，只有一个参数x，表达式是x * x：
//x => x * x;

/*
    Lambda表达式的每一个参数对应委托的一个参数，而表达式的类型（可以是void）对应着委托的返回类型。
*/

//本例中，x对应参数i，而表达式x * x的类型对应着返回值类型int，因此它和Transformer委托是兼容的：
delegate int Transformer (int i);

//Lambda表达式的代码除了表达式之外还可以是语句块，因此我们可以把上例改写成：
//x => { return x * x; };

//Lambda表达式通常和Func和Action委托一起使用，因此前面的表达式通常写成如下形式：
Func<int, int>  sqr = x =>  x * x;

#!csharp

//以下是带有两个参数的表达式示例：
Func<string, string, int>  totalLength = (s1, s2) =>  s1.Length + s2.Length;
int total = totalLength ("hello", "world");    // total is 10;
Console.WriteLine (total);

//Lambda表达式是从C# 3.0引入的。
