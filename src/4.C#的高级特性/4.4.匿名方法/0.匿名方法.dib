#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

/*
    4.4 匿名方法
    匿名方法是C# 2.0引入的特性，并通过C# 3.0的Lambda表达式得到了极大的扩展。
    匿名方法类似于Lambda表达式，但是没有以下的特性：
        · 隐式类型的参数；
        · 表达式语法（匿名方法必须是一个语句块）；
        · 在赋值给Expression<T>时将其编译为表达式树的能力。
    匿名方法的写法是在delegate关键字后面跟上参数的声明（可选），然后是方法体。
*/

//例如，以下面的委托为例：
delegate int Transformer(int i);

//如下是实现和调用匿名方法的示例：
Transformer sqr = delegate (int x) { return x * x; };
Console.WriteLine(sqr(3)); // 9

#!csharp

//第一行代码语义上等同于下面的Lambda表达式：
Transformer sqr = (int x) => { return x * x; };

#!csharp

//或者更简单的：
Transformer sqr = x => x * x;

#!csharp

/*
    匿名方法和Lambda表达式捕获外部变量的方式是完全一样的。
    🍦完全省略参数的声明是匿名方法独有的特性，即使委托需要这些参数声明：
*/

//该特性尤其适用于声明一个具有空事件处理器的事件
public event EventHandler Clicked = delegate { };

//这样，在触发事件时就避免了null检查。
//下面的写法是合法的：
// Notice that we omit the parameters:
Clicked += delegate { Console.WriteLine("clicked"); };
